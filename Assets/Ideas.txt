Type of game - Platformer with elements of:
Roguelite
Stealth
Shooter

SCHOOL PROJECT:
-Theme: Reason for respawn is timeloop. You fight semi-organized groups and infiltrate their bases

-Ending: Rainworld. You die so hard you can't respawn (black hole maybe?)


-Story: you are set in a timeloop by a military force. Your task is to infiltrate bases and steal weapons (which you use).
    The "enemies" are the good guy revolutionists. You are part of a magically enhanced oppressive military force tasked to infiltrate and eliminate 
    revolutionists. When you read further into it, you realize that your party is doing extreme oppression.

-Story options: you are military last resort, all energy is put into creating your weapon system

-Weapon system ideas: weapon slot where you can put in a weapon with different stats/projectiles, where you can then put a "trigger" (on fire, on land, after seconds)
    which triggers the effect(s).
    Slots needed: weapon slot, alt weapon, 2 movement

    


-Gameplay:


-Priority: weapon system, enemies, item collection system, maps, saves, hub/mission system, story, endings








More refined genre ideas:
Roguelite where the further you progress, the better gear you take back. Could possibly be some sort of extraction shooter
Infiltration game where you have to go into a place without dying, but the enemies are strong enough that the best strategy is not direct aggression
Game where you get items based on 'achievements' (kill x things, beat level in x seconds, etc.). Possibly have only 1 level that you repeat consistently

Visual theme ideas:
Forest
Industrial - Lots of metal, similar to Portal (very sterile and clean looking) or Portal 2 (decaying)
Military - Very fortified look, everything looks sturdy and controlled
Space - In spaceship (because gravity), lots of white and windows with stars in background, ties in with industrial
Body Horror - Lots of fleshy looking things (like Half-Life and Rainworld rot), meat tentacles, decaying fleshy structures

Emotional theme ideas:
Apocalypse - some form of (imminent or past) apocalyptic disaster
War - international war
1984 - basically only works with stealth aspects. Plays in with the war theme. Hunger Games esque revolution against a nearly all-seeing state

Artstyle ideas:
Pixelart
Pixel shader with normal art (Rainworld/Noita esque, but probably needs procedural animation and that shit hard so probably not this)
Grim
Vibrant




Upgrade system ideas:
Ctrl-C Ctrl-V the system of Noita (without the rest of Noita)
Have 1 movement, 1 weapon, 1 alt weapon, and 2 modifier slots. Movement can be things like dash/groundpound, weapon can be different guns/melee,
alt weapon can be things like grappling hook or just 2nd damage weapon, modifiers can be things like speed or firerate.
Have a set amount of points to use on different slots

More refined system ideas:
    Have the movement/weapon/alt/modifier system and also the point system. Have 1 slot by default but can add slots for 'item modifiers' with points. This can be
things similar to Noita upgrades. Have 1/2 slots besides that for universal modifiers (like +1 projectile)
    Have the movement/weapon/alt/modifier system but with 'trigger' items. Like 'When Projectile Lands', or 'On Fire', where you can put items, allowing for
things like a Grappling Hook that knocks enemies back when fired and explodes on landing. Possible Mana system to encourage resource management





Leaning towards:
    Theme - unknown (not that relevant yet)
    Genre - Shooter with extraction elements and some stealth/evasion (enemies too strong to fight multiple at once, so either run, hide, trap, or lure them out), you
go into an area where you sneak around and try and find items, before having to return somewhere to leave and use said items. If you die, all items get dropped
and you have to go back in and try and retrieve them (possible upgrades to negate some of the item loss)
    System - Movement/weapon/alt/modifier system where each 'module' can have multiple triggers, each with its own effects, and optional modifiers


Priorities of development:
1. Create system (barebones, don't need lots of entries into each slot type)
2. Come up with how enemies should behave
3. Create pseudocode for enemies
4. Code pathfinding for enemies
5. Code enemies
6. Improve visuals (particle effects, post processing, 1-sprite art for enemies/player)





Implementation/highly refined ideas:
    System- Have all 'modules' (movement/weapon/alt/modifier) vertically. When clicked, a menu expands where you can customize everything, and the other modules 
            disappear offscreen. Each module has x different 'parts'. Each part takes a trigger (e.g. 'always', 'on land', 'on start') and 1-2 items (e.g. 'explode', 
            'pull', 'stun'). Triggers can possibly also have optional modifiers (e.g. 'only trigger when above x health', 'wait x seconds'), 
            and said modifiers can also optionally have variable fields (e.g. the x field in said examples)
            Can possibly have different 'suits' with different base stats and slots (e.g. tankier suit has higher HP but less mobility and 3 modifier slots, while
            an aggressive suit has lower HP but a lot more mobility and 2 weapon slots)
    
    Enemy AI - Generic: enemies should stand around as lookout with very wide FOV. If the player enters, the enemy sees them after a certain amount of time, which
            is based on the distance between the player and enemy (for example if the player is 5 units away they are noticed after 0.1s, but 20 units away takes 
            0.3 or something). If the enemy notices the player, they should pathfind towards their last seen location, and their 'noticing' time should be
            drastically decreased. When they see the player, they sprint towards them and attack
            Advanced: 3 types of enemies, which are lookout/tasks/scout. Lookout is as described above. Task hangs around certain areas and are less observant
            but more abundant. Scouts move around a lot and are more middle-ground in terms of vision.



Enemy pseudocode:

void Update(){

    if(is task type){
        pathfind(task location + random offset)
    }
    if(is scout type){
        pathfind(random location)
    }

    if(see player and timer is up){
        state = alert
        last location = player position
        pathfind(last location)
    }

    if(not see player and has been a while){
        state = calm
        pathfind(base position)
    }

}